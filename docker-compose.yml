version: '3.8'

services:
  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "${LOCALSTACK_PORT}:4566"
    environment:
      - SERVICES=${SERVICES}
      - DEBUG=${DEBUG}
      - DOCKER_HOST=${DOCKER_HOST}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    volumes:
      - ./localstack:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock

  awscli:
    image: amazon/aws-cli
    depends_on:
      - localstack
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    entrypoint: >
      sh -c "
      echo 'Waiting for LocalStack...';
      sleep 10;
      aws --endpoint-url=http://localstack:4566 ec2 run-instances --image-id ami-12345678 --instance-type t2.micro --count 1;
      echo 'EC2 instance created through AWS CLI';
      tail -f /dev/null
      "

  terraform:
    image: hashicorp/terraform:light
    depends_on:
      - localstack
    working_dir: /workspace
    volumes:
      - ./terraform:/workspace
      - tfstate_data:/workspace/tfdata
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    entrypoint: >
      sh -c "
      echo 'Initializing Terraform...';
      terraform init;
      terraform apply -auto-approve;
      tail -f /dev/null
      "

  drift-checker:
    build:
      context: .
    container_name: drift-checker
    volumes:
      - ./terraform/main.tf:/app/terraform/main.tf
      - tfstate_data:/app/shared
      - .env:/app/.env
    environment:
      - TFSTATE_PATH=${TFSTATE_PATH}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    depends_on:
      - localstack
      - terraform
      - awscli
    entrypoint: ["sh"]
    stdin_open: true
    tty: true

volumes:
  tfstate_data: {}
